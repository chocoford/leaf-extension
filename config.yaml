name: leaf
scopeName: source.leaf
patterns:
  # 引用html
  - include: 'text.html.basic'
  - include: '#comments' 
  - include: '#keywords'
  - include: '#tags'
  - include: '#variables'
  - include: '#string'
  # - include: '#numbers'
  # - include: '#invalid'
repository:
  keywords:
    patterns:
      - comment: 'boolean'
        name: meta.keyword.boolean.leaf
        match: (true|false)
        captures:
          '0': {name: constant.language.boolean.leaf}
      - comment: 'nil'
        name: meta.keyword.nil.leaf
        match: (nil)
        captures:
          '0': {name: constant.language.nil.leaf}
      - comment: 'branch keywords'
        name: meta.keyword.branch.leaf
        match: (\#if|\#elseif|\#else|\#endif)
        captures:
          '0': {name: keyword.control.branch.leaf}    
      - comment: 'embed keywords'
        name: meta.keyword.leaf
        match: (\#import|\#export|\#endexport|\#extend|\#endextend)
        captures:
          '0': {name: keyword.control.leaf}
      - comment: 'for loop'
        name: meta.keyword.loop.leaf
        match: (\#for|in|\#endfor)
        captures:
          '0': {name: keyword.control.loop.leaf}
      - comment: 'operators'
        name: meta.keyword.operator.leaf
        match: (>|<|>=|<=|==|!=|&&)
        captures:
          '0': {name: keyword.operator.leaf}
  tags:
    patterns:
      - comment: 'tag'
        begin: '(#)(date|capitalize|contains|count|lowercase|uppercase)(\()'
        beginCaptures:
          '1': {name: keyword.control.leaf}
          '2': {name: entity.name.tag.leaf}
          '3': {name: constant.other.begin.leaf}
        end: '\)'
        endCaptures:
          '0': {name: constant.other.end.leaf}
        patterns:
          - include: '#string'
          - include: '#in_block_tags'
          - include: '#in_block_variables'
          - include: '#numbers'
          - include: '#invalid'
      - comment: 'costom tag'
        begin: '(#)(\w+)(\()'
        beginCaptures:
          '1': {name: keyword.control.leaf}
          '2': {name: entity.name.function.costom.tag.leaf}
          '3': {name: constant.other.begin.leaf}
        end: '\)'
        endCaptures:
          '0': {name: constant.other.end.leaf}
        patterns:
          - include: '#string'
          - include: '#in_block_tags'
          - include: '#in_block_variables'
          - include: '#numbers'
          - include: '#invalid'
  in_block_tags:
    patterns:
      - comment: 'recursive tag'
        begin: '(date|capitalize|contains|count|lowercase|uppercase)(\()'
        beginCaptures:
          '1': {name: entity.name.tag.leaf}
          '2': {name: constant.other.begin.leaf}
        end: '\)'
        endCaptures:
          '0': {name: constant.other.end.leaf}
        patterns:
          - include: '#string'
          - include: '#in_block_tags'
          - include: '#in_block_variables'
          - include: '#numbers'
          - include: '#invalid'
  in_block_variables:
    name: meta.in_block.variables.leaf
    match: '([A-Za-z_])(\w+)'
    captures:
      '0': {name: variable.parameter.leaf}
  variables:
    patterns:
      - name: meta.variable.leaf
        match: '([#])(\({1,})([^)]*)(\))'
        captures:
          '1': {name: keyword.control.leaf}
          '2': {name: constant.other.begin.leaf}
          '3': {name: variable.parameter.leaf}
          '4': {name: constant.other.end.leaf}   
  comments:
    patterns:
      - comment: 'comment line'
        begin: '\#\/\/'
        beginCaptures:
          '0':
            name: punctuation.definition.comment.leaf
        end: '$'
        endCaptures:
          '0':
            name: punctuation.definition.comment.leaf
        name: comment.line.double-slash.leaf
        patterns:
          # - name: meta.comment.content.leaf
          - match: .
            captures:
              '0':
                name: comment.block.documentation.leaf
      - comment: 'comment block'
        begin: '\#\/\*'
        beginCaptures:
          '0':
            name: punctuation.definition.comment.leaf
        end: '\*\/'
        endCaptures:
          '0':
            name: punctuation.definition.comment.leaf
        name: comment.block.leaf
        patterns:
          - name: meta.comment.block.leaf
          - match: .
            captures:
              '0':
                name: comment.block.leaf
  string: 
    name: meta.string.leaf
    begin: '\"'
    beginCaptures:
      '0': {name: string.quoted.double.leaf}
    end: '\"'
    endCaptures:
      '0': {name: string.quoted.double.leaf}
    patterns:
      - match: .
        name: string.quoted.double.leaf
  numbers: 
    name: meta.constant.numeric.leaf
    match: '(\d+)(\s*)'
    captures:
      '0': {name: constant.numeric.leaf}
  invalid:
    name: meta.invalid.illegal.leaf
    match: '(\d+)([A-Za-z_]+)'
    captures:
      '0': {name: invalid.illegal.leaf}